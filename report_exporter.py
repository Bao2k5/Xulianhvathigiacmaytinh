# -*- coding: utf-8 -*-
"""
Module xu·∫•t b√°o c√°o Excel v√† PDF
Report Export Module for Attendance System
"""

import os
from datetime import datetime
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.chart import BarChart, Reference
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import config
from database import DatabaseManager

class ReportExporter:
    """Class xu·∫•t b√°o c√°o ch·∫•m c√¥ng"""
    
    def __init__(self):
        self.db = DatabaseManager()
        
        # Register font h·ªó tr·ª£ ti·∫øng Vi·ªát cho PDF (n·∫øu c√≥)
        try:
            # Th·ª≠ load font h·ªó tr·ª£ Unicode
            # pdfmetrics.registerFont(TTFont('TimesNewRoman', 'times.ttf'))
            pass
        except:
            print("‚ö†Ô∏è  Could not load Unicode font for PDF. Using default font.")
    
    def export_to_excel(self, start_date=None, end_date=None, employee_id=None, output_path=None):
        """
        Xu·∫•t b√°o c√°o ch·∫•m c√¥ng ra file Excel v·ªõi formatting ƒë·∫πp
        
        Args:
            start_date: Ng√†y b·∫Øt ƒë·∫ßu (format: DD/MM/YYYY)
            end_date: Ng√†y k·∫øt th√∫c (format: DD/MM/YYYY)
            employee_id: ID nh√¢n vi√™n (None = t·∫•t c·∫£)
            output_path: ƒê∆∞·ªùng d·∫´n file output
        
        Returns:
            output_path: ƒê∆∞·ªùng d·∫´n file ƒë√£ t·∫°o
        """
        print("üìä Generating Excel report...")
        
        # L·∫•y d·ªØ li·ªáu
        logs = self.db.get_attendance_logs(start_date, end_date, employee_id)
        
        if not logs:
            print("‚ùå No data to export!")
            return None
        
        # T·∫°o DataFrame
        df = pd.DataFrame(logs)
        
        # Format output path
        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"BaoCaoChamCong_{timestamp}.xlsx"
            output_path = os.path.join(config.REPORTS_DIR, filename)
        
        # T·∫°o Excel Writer
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            # Sheet 1: Chi ti·∫øt ch·∫•m c√¥ng
            df_detail = df[['datetime', 'employee_id', 'employee_name', 'department', 
                           'type', 'status', 'confidence', 'is_late', 'notes']]
            df_detail.columns = ['Th·ªùi gian', 'M√£ NV', 'H·ªç t√™n', 'Ph√≤ng ban', 
                                'Lo·∫°i', 'Tr·∫°ng th√°i', 'ƒê·ªô tin c·∫≠y', 'ƒêi mu·ªôn', 'Ghi ch√∫']
            df_detail.to_excel(writer, sheet_name='Chi ti·∫øt', index=False)
            
            # Sheet 2: Th·ªëng k√™ theo nh√¢n vi√™n
            summary = df.groupby(['employee_id', 'employee_name', 'department']).agg({
                'id': 'count',
                'is_late': 'sum',
                'confidence': 'mean'
            }).reset_index()
            summary.columns = ['M√£ NV', 'H·ªç t√™n', 'Ph√≤ng ban', 'S·ªë l·∫ßn ch·∫•m', 'S·ªë l·∫ßn mu·ªôn', 'ƒê·ªô tin c·∫≠y TB']
            summary.to_excel(writer, sheet_name='Th·ªëng k√™ NV', index=False)
            
            # Sheet 3: Th·ªëng k√™ theo ng√†y
            df['date'] = pd.to_datetime(df['datetime'], format=config.DATETIME_FORMAT).dt.date
            daily_summary = df.groupby('date').agg({
                'id': 'count',
                'is_late': 'sum'
            }).reset_index()
            daily_summary.columns = ['Ng√†y', 'T·ªïng l∆∞·ª£t ch·∫•m', 'S·ªë l·∫ßn mu·ªôn']
            daily_summary.to_excel(writer, sheet_name='Th·ªëng k√™ theo ng√†y', index=False)
            
            # Sheet 4: Th·ªëng k√™ theo ph√≤ng ban
            dept_summary = df.groupby('department').agg({
                'id': 'count',
                'is_late': 'sum',
                'confidence': 'mean'
            }).reset_index()
            dept_summary.columns = ['Ph√≤ng ban', 'S·ªë l·∫ßn ch·∫•m', 'S·ªë l·∫ßn mu·ªôn', 'ƒê·ªô tin c·∫≠y TB']
            dept_summary.to_excel(writer, sheet_name='Th·ªëng k√™ ph√≤ng ban', index=False)
        
        # Format Excel file
        self._format_excel(output_path)
        
        print(f"‚úÖ Excel report exported: {output_path}")
        return output_path
    
    def _format_excel(self, file_path):
        """Format Excel file v·ªõi styles ƒë·∫πp"""
        wb = load_workbook(file_path)
        
        # Define styles
        header_fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
        header_font = Font(color="FFFFFF", bold=True, size=11)
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        for sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            
            # Format header row
            for cell in ws[1]:
                cell.fill = header_fill
                cell.font = header_font
                cell.alignment = Alignment(horizontal='center', vertical='center')
                cell.border = border
            
            # Format data rows
            for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
                for cell in row:
                    cell.border = border
                    cell.alignment = Alignment(horizontal='left', vertical='center')
            
            # Auto-adjust column width
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    if cell.value:
                        max_length = max(max_length, len(str(cell.value)))
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
            
            # Freeze first row
            ws.freeze_panes = 'A2'
        
        wb.save(file_path)
    
    def export_to_pdf(self, start_date=None, end_date=None, employee_id=None, output_path=None):
        """
        Xu·∫•t b√°o c√°o ch·∫•m c√¥ng ra file PDF
        
        Args:
            start_date: Ng√†y b·∫Øt ƒë·∫ßu (format: DD/MM/YYYY)
            end_date: Ng√†y k·∫øt th√∫c (format: DD/MM/YYYY)
            employee_id: ID nh√¢n vi√™n (None = t·∫•t c·∫£)
            output_path: ƒê∆∞·ªùng d·∫´n file output
        
        Returns:
            output_path: ƒê∆∞·ªùng d·∫´n file ƒë√£ t·∫°o
        """
        print("üìÑ Generating PDF report...")
        
        # L·∫•y d·ªØ li·ªáu
        logs = self.db.get_attendance_logs(start_date, end_date, employee_id)
        
        if not logs:
            print("‚ùå No data to export!")
            return None
        
        # Format output path
        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"BaoCaoChamCong_{timestamp}.pdf"
            output_path = os.path.join(config.REPORTS_DIR, filename)
        
        # T·∫°o PDF
        doc = SimpleDocTemplate(output_path, pagesize=landscape(A4))
        elements = []
        styles = getSampleStyleSheet()
        
        # Title
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            textColor=colors.HexColor('#1F4E78'),
            spaceAfter=30,
            alignment=1  # Center
        )
        
        title = Paragraph(f"<b>{config.PDF_TITLE}</b>", title_style)
        elements.append(title)
        
        # Company name
        if config.COMPANY_NAME:
            company = Paragraph(f"<b>{config.COMPANY_NAME}</b>", styles['Normal'])
            elements.append(company)
            elements.append(Spacer(1, 12))
        
        # Date range
        period = f"T·ª´ ng√†y: {start_date or 'ƒê·∫ßu'} - ƒê·∫øn ng√†y: {end_date or 'Hi·ªán t·∫°i'}"
        elements.append(Paragraph(period, styles['Normal']))
        elements.append(Spacer(1, 20))
        
        # Summary statistics
        total_records = len(logs)
        total_late = sum(1 for log in logs if log['is_late'])
        unique_employees = len(set(log['employee_id'] for log in logs))
        
        summary_text = f"""
        <b>T·ªïng quan:</b><br/>
        - T·ªïng s·ªë l∆∞·ª£t ch·∫•m c√¥ng: {total_records}<br/>
        - S·ªë nh√¢n vi√™n: {unique_employees}<br/>
        - S·ªë l·∫ßn ƒëi mu·ªôn: {total_late}<br/>
        """
        elements.append(Paragraph(summary_text, styles['Normal']))
        elements.append(Spacer(1, 20))
        
        # Table data
        table_data = [['Th·ªùi gian', 'M√£ NV', 'H·ªç t√™n', 'Ph√≤ng ban', 'Lo·∫°i', 'Tr·∫°ng th√°i', 'ƒêi mu·ªôn']]
        
        for log in logs[:100]:  # Limit to first 100 records for PDF
            table_data.append([
                log['datetime'],
                log['employee_id'],
                log['employee_name'],
                log['department'] or '',
                log['type'],
                log['status'],
                'C√≥' if log['is_late'] else 'Kh√¥ng'
            ])
        
        # Create table
        table = Table(table_data, repeatRows=1)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1F4E78')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
        ]))
        
        elements.append(table)
        
        if len(logs) > 100:
            elements.append(Spacer(1, 12))
            note = Paragraph(f"<i>* Ch·ªâ hi·ªÉn th·ªã 100/{len(logs)} b·∫£n ghi ƒë·∫ßu ti√™n</i>", styles['Normal'])
            elements.append(note)
        
        # Build PDF
        doc.build(elements)
        
        print(f"‚úÖ PDF report exported: {output_path}")
        return output_path
    
    def generate_full_report(self, start_date=None, end_date=None, employee_id=None):
        """
        T·∫°o b√°o c√°o ƒë·∫ßy ƒë·ªß (c·∫£ Excel v√† PDF)
        
        Returns:
            excel_path, pdf_path: Tuple ƒë∆∞·ªùng d·∫´n 2 file
        """
        print("üìä Generating full report (Excel + PDF)...")
        
        excel_path = self.export_to_excel(start_date, end_date, employee_id)
        pdf_path = self.export_to_pdf(start_date, end_date, employee_id)
        
        return excel_path, pdf_path


# Test
if __name__ == "__main__":
    exporter = ReportExporter()
    
    # Test export
    print("\nüß™ Testing report export...")
    
    # Uncomment to test
    # excel_file = exporter.export_to_excel()
    # pdf_file = exporter.export_to_pdf()
    
    print("‚úÖ Test completed!")
