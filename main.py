# -*- coding: utf-8 -*-
"""
Giao di·ªán ch√≠nh cho h·ªá th·ªëng ch·∫•m c√¥ng AI
Main GUI for AI Attendance System
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import cv2
from PIL import Image, ImageTk
import threading
from datetime import datetime
import os

import config
from database import DatabaseManager
from face_recognition import FaceRecognizer
from anti_spoofing import AntiSpoofing
from report_exporter import ReportExporter

class AttendanceApp:
    """·ª®ng d·ª•ng ch·∫•m c√¥ng AI v·ªõi giao di·ªán Tkinter"""
    
    def __init__(self, root):
        self.root = root
        self.root.title(config.WINDOW_TITLE)
        self.root.geometry(f"{config.WINDOW_WIDTH}x{config.WINDOW_HEIGHT}")
        
        # Initialize modules
        print("üîß Initializing modules...")
        self.db = DatabaseManager()
        self.face_recognizer = FaceRecognizer()
        self.anti_spoofing = AntiSpoofing()
        self.report_exporter = ReportExporter()
        
        # Load embeddings
        embeddings = self.db.load_face_embeddings()
        if embeddings:
            self.face_recognizer.load_embeddings(embeddings)
        
        # Camera variables
        self.camera = None
        self.is_camera_running = False
        self.current_frame = None
        self.prev_frame = None
        
        # Registration variables
        self.registration_mode = False
        self.registration_images = []
        self.registration_employee_id = None
        self.registration_name = None
        self.registration_poses = []  # Danh s√°ch g√≥c ƒë√£ ch·ª•p
        self.current_pose_index = 0   # G√≥c hi·ªán t·∫°i
        self.pose_names = ["CH√çNH DI·ªÜN", "NGHI√äNG TR√ÅI", "NGHI√äNG PH·∫¢I", "C√öI XU·ªêNG", "NG∆Ø·ªöC L√äN"]
        self.pose_captured = [False] * 5  # Tr·∫°ng th√°i ƒë√£ ch·ª•p
        self.pose_timer = 0  # B·ªô ƒë·∫øm th·ªùi gian gi·ªØ t∆∞ th·∫ø
        self.pose_hold_duration = 2.0  # 2 gi√¢y
        self.current_face_for_registration = None  # L∆∞u ·∫£nh m·∫∑t hi·ªán t·∫°i
        
        # Setup UI
        self.setup_ui()
        
        print("‚úÖ Application initialized!")
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        # Create main container
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Left panel - Camera feed
        left_panel = ttk.LabelFrame(main_container, text="üìπ Camera", padding=10)
        left_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # Camera display
        self.camera_label = ttk.Label(left_panel)
        self.camera_label.pack(fill=tk.BOTH, expand=True)
        
        # Camera controls
        camera_controls = ttk.Frame(left_panel)
        camera_controls.pack(fill=tk.X, pady=(10, 0))
        
        self.btn_start_camera = ttk.Button(camera_controls, text="üé• B·∫≠t Camera", 
                                           command=self.start_camera)
        self.btn_start_camera.pack(side=tk.LEFT, padx=5)
        
        self.btn_stop_camera = ttk.Button(camera_controls, text="‚èπÔ∏è T·∫Øt Camera", 
                                          command=self.stop_camera, state=tk.DISABLED)
        self.btn_stop_camera.pack(side=tk.LEFT, padx=5)
        
        # Status label
        self.status_label = ttk.Label(left_panel, text="üì∑ Camera ch∆∞a kh·ªüi ƒë·ªông", 
                                      font=("Segoe UI", 10, "bold"))
        self.status_label.pack(pady=10)
        
        # Right panel - Controls
        right_panel = ttk.Frame(main_container, width=400)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, padx=(5, 0))
        
        # Notebook for tabs
        notebook = ttk.Notebook(right_panel)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Tab 1: Ch·∫•m c√¥ng
        tab_attendance = ttk.Frame(notebook)
        notebook.add(tab_attendance, text="‚è∞ Ch·∫•m c√¥ng")
        self.setup_attendance_tab(tab_attendance)
        
        # Tab 2: ƒêƒÉng k√Ω
        tab_register = ttk.Frame(notebook)
        notebook.add(tab_register, text="‚ûï ƒêƒÉng k√Ω NV")
        self.setup_register_tab(tab_register)
        
        # Tab 3: Qu·∫£n l√Ω
        tab_manage = ttk.Frame(notebook)
        notebook.add(tab_manage, text="üë• Qu·∫£n l√Ω")
        self.setup_manage_tab(tab_manage)
        
        # Tab 4: B√°o c√°o
        tab_report = ttk.Frame(notebook)
        notebook.add(tab_report, text="üìä B√°o c√°o")
        self.setup_report_tab(tab_report)
    
    def setup_attendance_tab(self, parent):
        """Setup tab ch·∫•m c√¥ng"""
        frame = ttk.Frame(parent, padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title = ttk.Label(frame, text="Ch·∫•m c√¥ng t·ª± ƒë·ªông", 
                         font=("Segoe UI", 12, "bold"))
        title.pack(pady=10)
        
        # Info
        info_text = """
        H∆∞·ªõng d·∫´n:
        1. B·∫≠t camera
        2. ƒê·ª©ng tr∆∞·ªõc camera
        3. H·ªá th·ªëng t·ª± ƒë·ªông nh·∫≠n di·ªán
        4. Ch·∫•m c√¥ng th√†nh c√¥ng ‚úì
        
        üîí Anti-Spoofing: B·∫¨T
        - Ph√°t hi·ªán ·∫£nh in
        - Ph√°t hi·ªán video gi·∫£
        - Ph√°t hi·ªán m·∫∑t n·∫° 3D
        """
        info_label = ttk.Label(frame, text=info_text, justify=tk.LEFT)
        info_label.pack(pady=10)
        
        # Last attendance log
        log_frame = ttk.LabelFrame(frame, text="üìù L·ªãch s·ª≠ g·∫ßn nh·∫•t", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.attendance_log = tk.Text(log_frame, height=15, width=40, 
                                      state=tk.DISABLED, wrap=tk.WORD)
        self.attendance_log.pack(fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(log_frame, command=self.attendance_log.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.attendance_log.config(yscrollcommand=scrollbar.set)
    
    def setup_register_tab(self, parent):
        """Setup tab ƒëƒÉng k√Ω nh√¢n vi√™n"""
        frame = ttk.Frame(parent, padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title = ttk.Label(frame, text="ƒêƒÉng k√Ω nh√¢n vi√™n m·ªõi", 
                         font=("Segoe UI", 12, "bold"))
        title.pack(pady=10)
        
        # Form
        form_frame = ttk.Frame(frame)
        form_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(form_frame, text="M√£ nh√¢n vi√™n:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.entry_emp_id = ttk.Entry(form_frame, width=30)
        self.entry_emp_id.grid(row=0, column=1, pady=5, padx=5)
        
        ttk.Label(form_frame, text="H·ªç t√™n:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.entry_name = ttk.Entry(form_frame, width=30)
        self.entry_name.grid(row=1, column=1, pady=5, padx=5)
        
        ttk.Label(form_frame, text="Ph√≤ng ban:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.entry_dept = ttk.Entry(form_frame, width=30)
        self.entry_dept.grid(row=2, column=1, pady=5, padx=5)
        
        ttk.Label(form_frame, text="Ch·ª©c v·ª•:").grid(row=3, column=0, sticky=tk.W, pady=5)
        self.entry_position = ttk.Entry(form_frame, width=30)
        self.entry_position.grid(row=3, column=1, pady=5, padx=5)
        
        # Instructions
        info_text = """üì∏ H∆∞·ªõng d·∫´n ch·ª•p ·∫£nh:
        
üéØ H·ªá th·ªëng y√™u c·∫ßu 5 g√≥c m·∫∑t ƒë·ªÉ nh·∫≠n di·ªán t·ªët h∆°n:
  1Ô∏è‚É£ CH√çNH DI·ªÜN - Nh√¨n th·∫≥ng v√†o camera
  2Ô∏è‚É£ NGHI√äNG TR√ÅI - Xoay m·∫∑t sang tr√°i 45¬∞
  3Ô∏è‚É£ NGHI√äNG PH·∫¢I - Xoay m·∫∑t sang ph·∫£i 45¬∞
  4Ô∏è‚É£ C√öI XU·ªêNG - C√∫i ƒë·∫ßu xu·ªëng nh·∫π
  5Ô∏è‚É£ NG∆Ø·ªöC L√äN - Ng∆∞·ªõc ƒë·∫ßu l√™n nh·∫π

‚ö†Ô∏è L∆∞u √Ω:
  ‚Ä¢ √Ånh s√°ng ƒë·∫ßy ƒë·ªß
  ‚Ä¢ Kh√¥ng ƒëeo kh·∫©u trang/k√≠nh ƒëen
  ‚Ä¢ Gi·ªØ m·∫∑t trong khung h√¨nh
        """
        ttk.Label(frame, text=info_text, justify=tk.LEFT, 
                 foreground="blue").pack(pady=10)
        
        # Progress
        self.register_progress = ttk.Label(frame, text="Ch∆∞a b·∫Øt ƒë·∫ßu", 
                                           font=("Segoe UI", 10, "bold"),
                                           foreground="gray")
        self.register_progress.pack(pady=5)
        
        # Pose instruction (hi·ªÉn th·ªã g√≥c c·∫ßn ch·ª•p)
        self.pose_instruction = ttk.Label(frame, text="", 
                                         font=("Segoe UI", 14, "bold"),
                                         foreground="red")
        self.pose_instruction.pack(pady=10)
        
        # Buttons
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(pady=10)
        
        self.btn_start_register = ttk.Button(btn_frame, text="üì∏ B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω", 
                                             command=self.start_registration)
        self.btn_start_register.pack(side=tk.LEFT, padx=5)
        
        self.btn_cancel_register = ttk.Button(btn_frame, text="‚ùå H·ªßy", 
                                              command=self.cancel_registration, 
                                              state=tk.DISABLED)
        self.btn_cancel_register.pack(side=tk.LEFT, padx=5)
    
    def setup_manage_tab(self, parent):
        """Setup tab qu·∫£n l√Ω nh√¢n vi√™n"""
        frame = ttk.Frame(parent, padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title = ttk.Label(frame, text="Danh s√°ch nh√¢n vi√™n", 
                         font=("Segoe UI", 12, "bold"))
        title.pack(pady=10)
        
        # Treeview
        tree_frame = ttk.Frame(frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        columns = ('ID', 'H·ªç t√™n', 'Ph√≤ng ban')
        self.employee_tree = ttk.Treeview(tree_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.employee_tree.heading(col, text=col)
            self.employee_tree.column(col, width=120)
        
        self.employee_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, 
                                 command=self.employee_tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.employee_tree.config(yscrollcommand=scrollbar.set)
        
        # Buttons
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(pady=10)
        
        ttk.Button(btn_frame, text="üîÑ L√†m m·ªõi", 
                  command=self.refresh_employee_list).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="üóëÔ∏è X√≥a NV", 
                  command=self.delete_employee).pack(side=tk.LEFT, padx=5)
        
        # Load data
        self.refresh_employee_list()
    
    def setup_report_tab(self, parent):
        """Setup tab b√°o c√°o"""
        frame = ttk.Frame(parent, padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title = ttk.Label(frame, text="Xu·∫•t b√°o c√°o ch·∫•m c√¥ng", 
                         font=("Segoe UI", 12, "bold"))
        title.pack(pady=10)
        
        # Date range
        date_frame = ttk.LabelFrame(frame, text="Kho·∫£ng th·ªùi gian", padding=10)
        date_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(date_frame, text="T·ª´ ng√†y (DD/MM/YYYY):").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.entry_start_date = ttk.Entry(date_frame, width=20)
        self.entry_start_date.grid(row=0, column=1, pady=5, padx=5)
        
        ttk.Label(date_frame, text="ƒê·∫øn ng√†y (DD/MM/YYYY):").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.entry_end_date = ttk.Entry(date_frame, width=20)
        self.entry_end_date.grid(row=1, column=1, pady=5, padx=5)
        
        ttk.Label(date_frame, text="(ƒê·ªÉ tr·ªëng = t·∫•t c·∫£)", 
                 font=("Segoe UI", 8, "italic")).grid(row=2, column=0, columnspan=2, pady=5)
        
        # Export buttons
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(pady=20)
        
        ttk.Button(btn_frame, text="üìä Xu·∫•t Excel", 
                  command=lambda: self.export_report('excel')).pack(pady=5, fill=tk.X)
        ttk.Button(btn_frame, text="üìÑ Xu·∫•t PDF", 
                  command=lambda: self.export_report('pdf')).pack(pady=5, fill=tk.X)
        ttk.Button(btn_frame, text="üì¶ Xu·∫•t c·∫£ 2", 
                  command=lambda: self.export_report('both')).pack(pady=5, fill=tk.X)
        
        # Statistics
        stats_frame = ttk.LabelFrame(frame, text="üìà Th·ªëng k√™ nhanh", padding=10)
        stats_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.stats_label = ttk.Label(stats_frame, text="ƒêang t·∫£i...", justify=tk.LEFT)
        self.stats_label.pack()
        
        self.update_statistics()
    
    def start_camera(self):
        """Kh·ªüi ƒë·ªông camera"""
        if not self.is_camera_running:
            self.camera = cv2.VideoCapture(config.CAMERA_INDEX)
            self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, config.CAMERA_WIDTH)
            self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, config.CAMERA_HEIGHT)
            
            if self.camera.isOpened():
                self.is_camera_running = True
                self.btn_start_camera.config(state=tk.DISABLED)
                self.btn_stop_camera.config(state=tk.NORMAL)
                self.status_label.config(text="‚úÖ Camera ƒëang ho·∫°t ƒë·ªông")
                
                # Start camera thread
                thread = threading.Thread(target=self.update_camera_feed, daemon=True)
                thread.start()
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera!")
    
    def stop_camera(self):
        """D·ª´ng camera"""
        self.is_camera_running = False
        if self.camera:
            self.camera.release()
        
        self.btn_start_camera.config(state=tk.NORMAL)
        self.btn_stop_camera.config(state=tk.DISABLED)
        self.status_label.config(text="üì∑ Camera ƒë√£ t·∫Øt")
        self.camera_label.config(image='')
    
    def update_camera_feed(self):
        """Update camera feed v√† x·ª≠ l√Ω nh·∫≠n di·ªán - JARVIS STYLE"""
        import time
        import numpy as np
        frame_count = 0
        process_every_n_frames = 5
        skip_anti_spoofing = True
        
        # Bi·∫øn l∆∞u th√¥ng tin box ƒë·ªÉ v·∫Ω m∆∞·ª£t (kh√¥ng nh√°y)
        last_boxes = []
        last_names = []
        last_probs = []
        scan_line_y = 0  # V·ªã tr√≠ ƒë∆∞·ªùng qu√©t
        scan_speed = 10  # T·ªëc ƒë·ªô qu√©t C·ª∞C NHANH
        pulse_alpha = 0  # Hi·ªáu ·ª©ng pulse
        particle_positions = []  # Hi·ªáu ·ª©ng h·∫°t
        
        # SCAN CH·ªà 1 L·∫¶N m·ªói m·∫∑t
        face_scan_status = {}  # {box_id: progress (0-100)}
        face_scan_complete = {}  # {box_id: True/False}
        
        while self.is_camera_running:
            ret, frame = self.camera.read()
            if not ret:
                time.sleep(0.01)
                continue
            
            frame_count += 1
            small_frame = cv2.resize(frame, (640, 480))
            display_frame = small_frame.copy()
            
            # Ch·ªâ x·ª≠ l√Ω nh·∫≠n di·ªán m·ªói N frames
            if frame_count % process_every_n_frames == 0:
                faces, boxes, probs, landmarks = self.face_recognizer.detect_faces(small_frame)
                
                if boxes is not None and len(boxes) > 0:
                    # C·∫≠p nh·∫≠t th√¥ng tin m·ªõi
                    last_boxes = []
                    last_names = []
                    last_probs = []
                    
                    for i, (face, box, prob, landmark) in enumerate(zip(faces, boxes, probs, landmarks)):
                        
                        if skip_anti_spoofing or self.registration_mode:
                            is_real = True
                        else:
                            is_real, liveness_score, details = self.anti_spoofing.check_liveness(
                                face, landmark, self.prev_frame
                            )
                        
                        if is_real:
                            if self.registration_mode:
                                # L∆∞u ·∫£nh m·∫∑t hi·ªán t·∫°i ƒë·ªÉ ch·ª•p sau 2s
                                self.current_face_for_registration = face.copy()
                                
                                # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n g√≥c c·∫ßn ch·ª•p v·ªõi countdown
                                if self.current_pose_index < len(self.pose_names):
                                    remaining_time = max(0, self.pose_hold_duration - self.pose_timer)
                                    name = f"{self.pose_names[self.current_pose_index]} ({remaining_time:.1f}s)"
                                else:
                                    name = "HO√ÄN TH√ÄNH"
                                color = (0, 255, 255)  # Cyan
                            else:
                                employee_id, name, distance = self.face_recognizer.recognize_face(face)
                                
                                if employee_id:
                                    color = (0, 255, 0)  # Green - Success
                                    self.log_attendance(employee_id, name, prob, distance)
                                else:
                                    name = "UNKNOWN"
                                    color = (0, 165, 255)  # Orange
                            
                            # L∆∞u th√¥ng tin ƒë·ªÉ v·∫Ω m∆∞·ª£t
                            last_boxes.append((box, color))
                            last_names.append(name)
                            last_probs.append(prob)
                        else:
                            # Fake detected
                            last_boxes.append((box, (0, 0, 255)))  # Red
                            last_names.append("FAKE DETECTED")
                            last_probs.append(prob)
                
                self.prev_frame = small_frame.copy()
            
            # V·∫º KHUNG NG·∫¶U KI·ªÇU JARVIS HUD
            for idx, (box_info) in enumerate(last_boxes):
                box, color = box_info
                x1, y1, x2, y2 = [int(b) for b in box]
                
                # Hi·ªáu ·ª©ng pulse (nh·∫•p nh√°y nh·∫π)
                pulse_intensity = int(50 * np.sin(pulse_alpha * 0.15))
                color_pulse = tuple([min(255, max(0, c + pulse_intensity)) for c in color])
                
                # M√†u s√°ng h∆°n cho hi·ªáu ·ª©ng glow
                color_bright = tuple([min(255, c + 80) for c in color])
                color_dim = tuple([c // 3 for c in color])
                
                # B·ªé CORNER BOXES - Kh√¥ng v·∫Ω √¥ vu√¥ng n·ªØa
                
                # === H·∫†T NƒÇNG L∆Ø·ª¢NG XUNG QUANH (PARTICLES) ===
                # T·∫°o hi·ªáu ·ª©ng h·∫°t bay xung quanh m·∫∑t
                if frame_count % 3 == 0 and len(particle_positions) < 20:
                    # Th√™m h·∫°t m·ªõi
                    particle_x = np.random.randint(x1, x2)
                    particle_y = np.random.randint(y1, y2)
                    particle_positions.append({
                        'x': particle_x, 
                        'y': particle_y,
                        'vx': np.random.randint(-2, 3),
                        'vy': np.random.randint(-2, 3),
                        'life': 30,
                        'box_idx': idx
                    })
                
                # V·∫Ω v√† c·∫≠p nh·∫≠t h·∫°t
                particles_to_remove = []
                for i, particle in enumerate(particle_positions):
                    if particle['box_idx'] == idx and particle['life'] > 0:
                        # Ki·ªÉm tra lo·∫°i particle
                        if particle.get('type') == 'data':
                            # Data stream particles (s·ªë 0/1)
                            alpha = particle['life'] / 20
                            data_text = str(np.random.randint(0, 2))  # 0 ho·∫∑c 1
                            data_color = (255, 255, 0) if alpha > 0.5 else (255, 200, 0)  # Cyan fade
                            cv2.putText(display_frame, data_text, (particle['x'], particle['y']),
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.4, data_color, 1)
                        else:
                            # Energy particles g·ªëc
                            particle_size = int(2 + (particle['life'] / 15))
                            alpha = particle['life'] / 30
                            particle_color = tuple([int(c * alpha) for c in color_bright])
                            cv2.circle(display_frame, (particle['x'], particle['y']), particle_size, particle_color, -1)
                        
                        # C·∫≠p nh·∫≠t v·ªã tr√≠
                        particle['x'] += particle['vx']
                        particle['y'] += particle['vy']
                        particle['life'] -= 1
                    else:
                        particles_to_remove.append(i)
                
                # X√≥a h·∫°t h·∫øt hi·ªáu l·ª±c
                for i in reversed(particles_to_remove):
                    particle_positions.pop(i)
                
                # === SPIDER WEB SCAN - CH·ªà 1 L·∫¶N ===
                # M√†u x√°m tr·∫Øng nh·∫π
                gray_white = (200, 200, 200)  # X√°m nh·∫°t
                
                # T·∫°o ID duy nh·∫•t cho m·∫∑t n√†y (d·ª±a v√†o T√äN thay v√¨ v·ªã tr√≠ ƒë·ªÉ kh√¥ng l·∫∑p)
                if idx < len(last_names):
                    face_id = last_names[idx]  # D√πng t√™n ng∆∞·ªùi
                else:
                    face_id = f"unknown_{idx}"
                
                # Kh·ªüi t·∫°o scan status n·∫øu ch∆∞a c√≥
                if face_id not in face_scan_status:
                    face_scan_status[face_id] = 0
                    face_scan_complete[face_id] = False
                
                # Ch·ªâ qu√©t n·∫øu ch∆∞a ho√†n th√†nh
                if not face_scan_complete[face_id]:
                    # TƒÉng progress
                    face_scan_status[face_id] += 8  # Qu√©t nhanh h∆°n
                    if face_scan_status[face_id] >= 100:
                        face_scan_status[face_id] = 100
                        face_scan_complete[face_id] = True  # ƒê√°nh d·∫•u ƒë√£ xong - KH√îNG BAO GI·ªú QU√âT L·∫†I
                
                # L·∫•y progress hi·ªán t·∫°i
                scan_progress = face_scan_status.get(face_id, 0)
                
                # CH·ªà V·∫º HI·ªÜU ·ª®NG N·∫æU ƒêANG QU√âT (0-99)
                if scan_progress < 100:
                    # T√≠nh t√¢m m·∫∑t
                    center_x = (x1 + x2) // 2
                    center_y = (y1 + y2) // 2
                    max_radius = int(np.sqrt((x2-x1)**2 + (y2-y1)**2) / 2)
                    
                    # B√°n k√≠nh hi·ªán t·∫°i d·ª±a v√†o progress (qu√©t t·ª´ trong ra ngo√†i)
                    current_radius = int((scan_progress / 100.0) * max_radius)
                    
                    # V·∫º M·∫†NG NH·ªÜN (SPIDER WEB)
                    # 1. V·∫Ω c√°c v√≤ng tr√≤n ƒë·ªìng t√¢m
                    num_circles = 5
                    for i in range(1, num_circles + 1):
                        radius = int((i / num_circles) * current_radius)
                        if radius > 0:
                            alpha = 0.4 - (i / num_circles) * 0.3  # M·ªù d·∫ßn t·ª´ trong ra ngo√†i
                            overlay = display_frame.copy()
                            cv2.circle(overlay, (center_x, center_y), radius, gray_white, 1)
                            cv2.addWeighted(overlay, alpha, display_frame, 1 - alpha, 0, display_frame)
                    
                    # 2. V·∫Ω c√°c ƒë∆∞·ªùng tia t·ª´ t√¢m ra (spokes)
                    num_spokes = 16  # 16 ƒë∆∞·ªùng tia
                    for i in range(num_spokes):
                        angle = (i / num_spokes) * 360
                        angle_rad = np.radians(angle)
                        
                        # ƒêi·ªÉm cu·ªëi c·ªßa tia
                        end_x = int(center_x + current_radius * np.cos(angle_rad))
                        end_y = int(center_y + current_radius * np.sin(angle_rad))
                        
                        # V·∫Ω tia m·ªù
                        overlay = display_frame.copy()
                        cv2.line(overlay, (center_x, center_y), (end_x, end_y), gray_white, 1)
                        cv2.addWeighted(overlay, 0.3, display_frame, 0.7, 0, display_frame)
                    
                    # 3. V·∫Ω vi·ªÅn ngo√†i hi·ªán t·∫°i (s√°ng h∆°n)
                    if current_radius > 0:
                        cv2.circle(display_frame, (center_x, center_y), current_radius, gray_white, 2)
                
                # === KHUNG VI·ªÄN NGO√ÄI (B·ªé CROSSHAIR) ===
                # V·∫Ω vi·ªÅn ngo√†i m·ªù (shadow 3D)
                for offset in range(3, 0, -1):
                    alpha_val = 0.2 * (4 - offset)
                    shadow_color = tuple([int(c * alpha_val) for c in color])
                    cv2.rectangle(display_frame, (x1-offset, y1-offset), (x2+offset, y2+offset), shadow_color, 1)
                
                # T√≠nh t√¢m (d√πng cho panel connection)
                center_x, center_y = (x1 + x2) // 2, (y1 + y2) // 2
                
                # === TH√îNG TIN TEXT KI·ªÇU HUD ===
                if idx < len(last_names):
                    # T√™n
                    label_name = f"{last_names[idx]}"
                    # ƒê·ªô ch√≠nh x√°c
                    label_conf = f"CONF: {last_probs[idx]:.1%}" if idx < len(last_probs) else ""
                    # Kho·∫£ng c√°ch (gi·∫£ ƒë·ªãnh)
                    label_dist = f"DIST: {np.random.randint(50, 150)} cm"
                    
                    # V·∫Ω panel th√¥ng tin b√™n tr√°i
                    panel_x = x1 - 150
                    if panel_x < 10:
                        panel_x = x2 + 10
                    panel_y = y1
                    
                    # N·ªÅn panel
                    panel_w, panel_h = 140, 80
                    overlay = display_frame.copy()
                    cv2.rectangle(overlay, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (0, 0, 0), -1)
                    cv2.addWeighted(overlay, 0.8, display_frame, 0.2, 0, display_frame)
                    
                    # Vi·ªÅn panel
                    cv2.rectangle(display_frame, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), color_bright, 2)
                    cv2.line(display_frame, (panel_x + 5, panel_y + 25), (panel_x + panel_w - 5, panel_y + 25), color_dim, 1)
                    
                    # Text header
                    cv2.putText(display_frame, "SCAN RESULT", (panel_x + 10, panel_y + 18),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.4, color_bright, 1)
                    
                    # T√™n (to v√† s√°ng)
                    cv2.putText(display_frame, label_name, (panel_x + 10, panel_y + 42),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 3)  # Outline
                    cv2.putText(display_frame, label_name, (panel_x + 10, panel_y + 42),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, color_bright, 1)
                    
                    # Confidence
                    cv2.putText(display_frame, label_conf, (panel_x + 10, panel_y + 60),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.35, color_pulse, 1)
                    
                    # Distance
                    cv2.putText(display_frame, label_dist, (panel_x + 10, panel_y + 75),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.35, color_dim, 1)
                    
                    # ƒê∆∞·ªùng k·∫øt n·ªëi t·ª´ panel ƒë·∫øn m·∫∑t
                    cv2.line(display_frame, (panel_x + panel_w, panel_y + 40), (x1, center_y), color_dim, 1)
            
            # === HUD OVERLAY - TH√îNG TIN H·ªÜ TH·ªêNG ===
            # Timestamp
            timestamp = time.strftime("%H:%M:%S")
            cv2.putText(display_frame, f"TIME: {timestamp}", (10, 25),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)
            
            # FPS counter
            cv2.putText(display_frame, f"FPS: {int(1/0.03)}", (10, 45),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            
            # Face count
            cv2.putText(display_frame, f"FACES: {len(last_boxes)}", (10, 65),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 165, 0), 1)
            
            # System status
            status_text = "ACTIVE" if len(last_boxes) > 0 else "STANDBY"
            status_color = (0, 255, 0) if len(last_boxes) > 0 else (128, 128, 128)
            cv2.putText(display_frame, f"STATUS: {status_text}", (10, 85),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, status_color, 1)
            
            # TƒÉng v·ªã tr√≠ ƒë∆∞·ªùng qu√©t (C·ª∞C NHANH)
            scan_line_y = (scan_line_y + scan_speed) % 200
            pulse_alpha = (pulse_alpha + 1) % 360
            
            # D·ªçn d·∫πp face_scan_status cho c√°c m·∫∑t kh√¥ng c√≤n hi·ªÉn th·ªã
            current_face_ids = set()
            for box_info in last_boxes:
                box, _ = box_info
                x1, y1, x2, y2 = [int(b) for b in box]
                face_id = f"{x1}_{y1}_{x2}_{y2}"
                current_face_ids.add(face_id)
            
            # X√≥a c√°c face_id c≈© kh√¥ng c√≤n trong frame
            face_scan_status = {k: v for k, v in face_scan_status.items() if k in current_face_ids}
            face_scan_complete = {k: v for k, v in face_scan_complete.items() if k in current_face_ids}
            
            # === X·ª¨ L√ù ƒêƒÇNG K√ù T·ª∞ ƒê·ªòNG THEO TH·ªúI GIAN ===
            if self.registration_mode and self.current_face_for_registration is not None:
                # TƒÉng b·ªô ƒë·∫øm th·ªùi gian (m·ªói frame = 0.03s)
                self.pose_timer += 0.03
                
                # V·∫Ω thanh progress bar cho countdown
                if self.current_pose_index < 5:
                    bar_width = 300
                    bar_height = 30
                    bar_x = (640 - bar_width) // 2
                    bar_y = 420
                    
                    # N·ªÅn thanh
                    cv2.rectangle(display_frame, (bar_x, bar_y), (bar_x + bar_width, bar_y + bar_height), (50, 50, 50), -1)
                    cv2.rectangle(display_frame, (bar_x, bar_y), (bar_x + bar_width, bar_y + bar_height), (255, 255, 255), 2)
                    
                    # Thanh progress
                    progress = min(1.0, self.pose_timer / self.pose_hold_duration)
                    progress_width = int(bar_width * progress)
                    color_bar = (0, int(255 * (1 - progress)), int(255 * progress))  # Chuy·ªÉn t·ª´ ƒë·ªè sang xanh
                    cv2.rectangle(display_frame, (bar_x, bar_y), (bar_x + progress_width, bar_y + bar_height), color_bar, -1)
                    
                    # Text countdown
                    remaining = max(0, self.pose_hold_duration - self.pose_timer)
                    text = f"{remaining:.1f}s"
                    cv2.putText(display_frame, text, (bar_x + bar_width // 2 - 30, bar_y + 22),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                
                # Khi ƒë·ªß th·ªùi gian, ch·ª•p ·∫£nh
                if self.pose_timer >= self.pose_hold_duration:
                    self.capture_pose_image()
            
            # Convert v√† display
            display_frame = cv2.cvtColor(display_frame, cv2.COLOR_BGR2RGB)
            display_frame = cv2.resize(display_frame, (800, 600))
            photo = ImageTk.PhotoImage(image=Image.fromarray(display_frame))
            
            self.camera_label.config(image=photo)
            self.camera_label.image = photo
            
            time.sleep(0.03)  # Gi·∫£m delay ƒë·ªÉ m∆∞·ª£t h∆°n
    
    def start_registration(self):
        """B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω nh√¢n vi√™n"""
        employee_id = self.entry_emp_id.get().strip()
        name = self.entry_name.get().strip()
        
        if not employee_id or not name:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p M√£ NV v√† H·ªç t√™n!")
            return
        
        if not self.is_camera_running:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng b·∫≠t camera tr∆∞·ªõc!")
            return
        
        self.registration_mode = True
        self.registration_images = []
        self.registration_poses = []
        self.current_pose_index = 0
        self.pose_captured = [False] * 5
        self.pose_timer = 0
        self.current_face_for_registration = None
        self.registration_employee_id = employee_id
        self.registration_name = name
        
        self.btn_start_register.config(state=tk.DISABLED)
        self.btn_cancel_register.config(state=tk.NORMAL)
        self.register_progress.config(text="üì∏ Gi·ªØ t∆∞ th·∫ø 2 gi√¢y - G√≥c 1/5", foreground="blue")
        self.pose_instruction.config(text=f"‚û°Ô∏è {self.pose_names[0]}", foreground="red")
    
    def capture_registration_image(self, face):
        """KH√îNG D√ôNG N·ªÆA - Gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch"""
        pass
    
    def capture_pose_image(self):
        """Ch·ª•p ·∫£nh g√≥c hi·ªán t·∫°i sau khi gi·ªØ ƒë·ªß 2 gi√¢y"""
        if self.current_pose_index >= 5:
            return  # ƒê√£ ƒë·ªß 5 g√≥c
        
        if self.current_face_for_registration is None:
            return
        
        # Ki·ªÉm tra n·∫øu g√≥c n√†y ch∆∞a ch·ª•p
        if not self.pose_captured[self.current_pose_index]:
            # Ch·ª•p ·∫£nh
            self.registration_images.append(self.current_face_for_registration.copy())
            self.registration_poses.append(self.pose_names[self.current_pose_index])
            self.pose_captured[self.current_pose_index] = True
            
            # C·∫≠p nh·∫≠t UI
            count = self.current_pose_index + 1
            self.register_progress.config(
                text=f"‚úÖ ƒê√£ ch·ª•p g√≥c {count}/5: {self.pose_names[self.current_pose_index]}",
                foreground="green"
            )
            
            # Chuy·ªÉn sang g√≥c ti·∫øp theo
            self.current_pose_index += 1
            self.pose_timer = 0  # Reset timer
            self.current_face_for_registration = None
            
            if self.current_pose_index < 5:
                # C√≤n g√≥c c·∫ßn ch·ª•p
                self.pose_instruction.config(
                    text=f"‚û°Ô∏è TI·∫æP THEO: {self.pose_names[self.current_pose_index]}",
                    foreground="red"
                )
                # Delay 1 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng chu·∫©n b·ªã
                self.root.after(1000, self.ready_for_next_pose)
            else:
                # ƒê√£ ƒë·ªß 5 g√≥c
                self.pose_instruction.config(text="üéâ HO√ÄN TH√ÄNH!", foreground="green")
                self.root.after(500, self.complete_registration)
    
    def ready_for_next_pose(self):
        """S·∫µn s√†ng ch·ª•p g√≥c ti·∫øp theo"""
        if self.current_pose_index < 5:
            self.register_progress.config(
                text=f"üì∏ Gi·ªØ t∆∞ th·∫ø 2 gi√¢y - G√≥c {self.current_pose_index + 1}/5",
                foreground="blue"
            )
    
    def complete_registration(self):
        """Ho√†n t·∫•t ƒëƒÉng k√Ω"""
        self.registration_mode = False
        
        # Ki·ªÉm tra ƒë√£ ƒë·ªß 5 g√≥c ch∆∞a
        if len(self.registration_images) < 5:
            messagebox.showwarning("C·∫£nh b√°o", f"Ch∆∞a ƒë·ªß 5 g√≥c m·∫∑t! Hi·ªán c√≥ {len(self.registration_images)}/5")
            return
        
        # Add to database
        dept = self.entry_dept.get().strip()
        position = self.entry_position.get().strip()
        
        success = self.db.add_employee(
            self.registration_employee_id,
            self.registration_name,
            dept, position
        )
        
        if success:
            # Register face v·ªõi 5 g√≥c
            self.face_recognizer.register_face(
                self.registration_employee_id,
                self.registration_name,
                self.registration_images
            )
            
            # Save embeddings
            embeddings = self.face_recognizer.save_embeddings()
            self.db.save_face_embeddings(embeddings)
            
            # Th√¥ng b√°o chi ti·∫øt
            poses_text = "\n".join([f"  ‚úì {pose}" for pose in self.registration_poses])
            messagebox.showinfo("Th√†nh c√¥ng", 
                              f"ƒê√£ ƒëƒÉng k√Ω nh√¢n vi√™n {self.registration_name}!\n\n"
                              f"ƒê√£ ch·ª•p 5 g√≥c m·∫∑t:\n{poses_text}")
            
            # Reset form
            self.entry_emp_id.delete(0, tk.END)
            self.entry_name.delete(0, tk.END)
            self.entry_dept.delete(0, tk.END)
            self.entry_position.delete(0, tk.END)
            
            self.refresh_employee_list()
        else:
            messagebox.showerror("L·ªói", "M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!")
        
        self.btn_start_register.config(state=tk.NORMAL)
        self.btn_cancel_register.config(state=tk.DISABLED)
        self.register_progress.config(text="Ch∆∞a b·∫Øt ƒë·∫ßu", foreground="gray")
        self.pose_instruction.config(text="")
        
        # Reset bi·∫øn
        self.registration_images = []
        self.registration_poses = []
        self.current_pose_index = 0
        self.pose_captured = [False] * 5
    
    def cancel_registration(self):
        """H·ªßy ƒëƒÉng k√Ω"""
        self.registration_mode = False
        self.registration_images = []
        self.registration_poses = []
        self.current_pose_index = 0
        self.pose_captured = [False] * 5
        self.pose_timer = 0
        self.current_face_for_registration = None
        
        self.btn_start_register.config(state=tk.NORMAL)
        self.btn_cancel_register.config(state=tk.DISABLED)
        self.register_progress.config(text="ƒê√£ h·ªßy", foreground="gray")
        self.pose_instruction.config(text="")
    
    def log_attendance(self, employee_id, name, confidence, distance):
        """Ghi nh·∫≠n ch·∫•m c√¥ng"""
        # Check time between check-ins
        last_checkin = self.db.get_last_checkin(employee_id)
        
        if last_checkin:
            last_time = datetime.strptime(last_checkin['datetime'], config.DATETIME_FORMAT)
            time_diff = (datetime.now() - last_time).total_seconds()
            
            if time_diff < config.MIN_TIME_BETWEEN_CHECKINS:
                return  # Too soon
        
        # Determine if late
        current_time = datetime.now()
        work_start = datetime.strptime(config.WORK_START_TIME, "%H:%M").time()
        is_late = current_time.time() > work_start
        
        # Log to database
        self.db.log_attendance(
            employee_id, "Check-in", "Success",
            confidence, int(is_late),
            f"Distance: {distance:.3f}"
        )
        
        # Update UI
        log_text = f"[{current_time.strftime(config.DATETIME_FORMAT)}]\n"
        log_text += f"‚úÖ {name} ({employee_id})\n"
        log_text += f"Confidence: {confidence:.2f}\n"
        if is_late:
            log_text += "‚ö†Ô∏è ƒêI MU·ªòN\n"
        log_text += "-" * 40 + "\n\n"
        
        self.attendance_log.config(state=tk.NORMAL)
        self.attendance_log.insert('1.0', log_text)
        self.attendance_log.config(state=tk.DISABLED)
    
    def refresh_employee_list(self):
        """L√†m m·ªõi danh s√°ch nh√¢n vi√™n"""
        # Clear tree
        for item in self.employee_tree.get_children():
            self.employee_tree.delete(item)
        
        # Load employees
        employees = self.db.get_all_employees()
        
        for emp in employees:
            self.employee_tree.insert('', tk.END, values=(
                emp['employee_id'],
                emp['name'],
                emp['department'] or ''
            ))
    
    def delete_employee(self):
        """X√≥a nh√¢n vi√™n"""
        selection = self.employee_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a!")
            return
        
        item = self.employee_tree.item(selection[0])
        employee_id = item['values'][0]
        name = item['values'][1]
        
        confirm = messagebox.askyesno("X√°c nh·∫≠n", 
                                      f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n {name}?\n\n"
                                      f"Thao t√°c n√†y s·∫Ω x√≥a:\n"
                                      f"‚úì Th√¥ng tin nh√¢n vi√™n\n"
                                      f"‚úì D·ªØ li·ªáu khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω\n"
                                      f"‚úì L·ªãch s·ª≠ ch·∫•m c√¥ng")
        if confirm:
            # X√≥a trong database
            self.db.delete_employee(employee_id)
            
            # X√≥a face embeddings trong b·ªô nh·ªõ
            if employee_id in self.face_recognizer.known_embeddings:
                del self.face_recognizer.known_embeddings[employee_id]
                print(f"‚úÖ ƒê√£ x√≥a face embedding c·ªßa {employee_id} kh·ªèi b·ªô nh·ªõ")
            
            if employee_id in self.face_recognizer.known_names:
                del self.face_recognizer.known_names[employee_id]
                print(f"‚úÖ ƒê√£ x√≥a t√™n c·ªßa {employee_id} kh·ªèi b·ªô nh·ªõ")
            
            # L∆∞u l·∫°i embeddings sau khi x√≥a
            embeddings = self.face_recognizer.save_embeddings()
            self.db.save_face_embeddings(embeddings)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t file embeddings")
            
            # Refresh danh s√°ch
            self.refresh_employee_list()
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a ho√†n to√†n nh√¢n vi√™n {name}!\n\n"
                              f"H·ªá th·ªëng s·∫Ω kh√¥ng c√≤n nh·∫≠n di·ªán khu√¥n m·∫∑t n√†y n·ªØa.")
    
    def export_report(self, format_type):
        """Xu·∫•t b√°o c√°o"""
        start_date = self.entry_start_date.get().strip() or None
        end_date = self.entry_end_date.get().strip() or None
        
        try:
            if format_type == 'excel':
                path = self.report_exporter.export_to_excel(start_date, end_date)
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o Excel:\n{path}")
            elif format_type == 'pdf':
                path = self.report_exporter.export_to_pdf(start_date, end_date)
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o PDF:\n{path}")
            else:  # both
                excel_path, pdf_path = self.report_exporter.generate_full_report(start_date, end_date)
                messagebox.showinfo("Th√†nh c√¥ng", 
                                  f"ƒê√£ xu·∫•t b√°o c√°o:\nExcel: {excel_path}\nPDF: {pdf_path}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi xu·∫•t b√°o c√°o: {str(e)}")
    
    def update_statistics(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        try:
            logs = self.db.get_attendance_logs()
            employees = self.db.get_all_employees()
            
            total_logs = len(logs)
            total_employees = len(employees)
            total_late = sum(1 for log in logs if log['is_late'])
            
            today = datetime.now().strftime(config.DATE_FORMAT)
            today_logs = [log for log in logs if log['datetime'].startswith(today)]
            today_count = len(today_logs)
            
            stats_text = f"""
            üìä T·ªïng quan h·ªá th·ªëng:
            
            üë• T·ªïng s·ªë nh√¢n vi√™n: {total_employees}
            üìù T·ªïng l∆∞·ª£t ch·∫•m c√¥ng: {total_logs}
            ‚ö†Ô∏è S·ªë l·∫ßn ƒëi mu·ªôn: {total_late}
            
            üìÖ H√¥m nay ({today}):
            ‚úì ƒê√£ ch·∫•m c√¥ng: {today_count} l∆∞·ª£t
            """
            
            self.stats_label.config(text=stats_text)
        except Exception as e:
            self.stats_label.config(text=f"L·ªói: {str(e)}")
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        self.stop_camera()
        self.root.destroy()


def main():
    """Main function"""
    print("=" * 60)
    print("üöÄ AI ATTENDANCE SYSTEM - ANTI-SPOOFING")
    print("=" * 60)
    
    root = tk.Tk()
    app = AttendanceApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()


if __name__ == "__main__":
    main()
